/* ****************************************************************************
*
* Copyright (c) Francesco Abbruzzese. All rights reserved.
* francesco@dotnet-programming.com
* http://www.dotnet-programming.com/
* 
* This software is subject to the the license at http://mvccontrolstoolkit.codeplex.com/license  
* and included in the license.txt file of this distribution.
* 
* You must not remove this notice, or any other, from this software.
*
* ***************************************************************************/
var defaultYear = 1970 + 0; var defaultMonth = 0 + 0; var defaultDay = 1 + 0; var defaultHour = 0 + 0; var defaultMinute = 0 + 0; var defaultSecond = 0 + 0; function DateInput_Initialize(id) { if (document.getElementById(id + "_Year") != null) { document.getElementById(id + "_Year").onkeypress = DateInputYearKeyVerify; document.getElementById(id + "_Year").onpaste = DateInputYearHandlePaste; document.getElementById(id + "_Year").ondrop = DateInputYearHandlePaste; document.getElementById(id + "_Year").onchange = DateInputChanged } if (document.getElementById(id + "_Month") != null) { document.getElementById(id + "_Month").onchange = DateInputChanged } if (document.getElementById(id + "_Day") != null) { document.getElementById(id + "_Day").onchange = DateInputChanged } if (document.getElementById(id + "_Hours") != null) { document.getElementById(id + "_Hours").onchange = DateInputChanged } if (document.getElementById(id + "_Minutes") != null) { document.getElementById(id + "_Minutes").onchange = DateInputChanged } if (document.getElementById(id + "_Seconds") != null) { document.getElementById(id + "_Seconds").onchange = DateInputChanged } if (eval(id + "_DateInCalendar")) { var options = eval(id + "_CalendarOptions"); $("#" + id + "_Calendar").datepicker(options) } DateInputChanged(null, id, true, null, true); $("#" + id + "_Hidden").data("ready", true) } function DateInputGetNumDays(b, a) { b = b + 1; if (a % 4 == 0) { return (b == 9 || b == 4 || b == 6 || b == 11) ? 30 : (b == 2) ? 29 : 31 } else { return (b == 9 || b == 4 || b == 6 || b == 11) ? 30 : (b == 2) ? 28 : 31 } } function DateTimeAdjustYears(d, c, a) { if (d == null || d.tagName != "SELECT") { return } var b = 0; if (c == d.options[0].value && a == d.options[d.options.length - 1].value) { return } var e = d.value; d.options.length = 0; for (i = c; i <= a; i++) { if (i < 10) { d.options[b] = new Option("   " + i, i) } else { if (i < 100) { d.options[b] = new Option("  " + i, i) } else { if (i < 1000) { d.options[b] = new Option(" " + i, i) } else { d.options[b] = new Option("" + i, i) } } } b++ } MvcControlsToolKit_SetDateElement(d.id, e) } function DateTimeAdjustMonthes(d, c, a) { if (d == null) { return } var b = 0; if (c == d.options[0].value && a == d.options[d.options.length - 1].value) { return } var e = d.value; d.options.length = 0; for (i = c; i <= a; i++) { d.options[b] = new Option(DateTimeMonthes[i], i + 1); b++ } MvcControlsToolKit_SetDateElement(d.id, e) } function DateTimeAdjustDays(d, c, a) { if (d == null) { return } var b = 0; if (c == d.options[0].value && a == d.options[d.options.length - 1].value) { return } var e = d.value; d.options.length = 0; for (i = c; i <= a; i++) { if (i < 10) { d.options[b] = new Option(" " + i, i) } else { d.options[b] = new Option("" + i, i) } b++ } MvcControlsToolKit_SetDateElement(d.id, e) } function DateTimeAdjustTimeElement(d, c, a) { if (d == null) { return } var b = 0; if (c == d.options[0].value && a == d.options[d.options.length - 1].value) { return } var e = d.value; d.options.length = 0; for (i = c; i <= a; i++) { if (i < 10) { d.options[b] = new Option("0" + i, i) } else { d.options[b] = new Option("" + i, i) } b++ } MvcControlsToolKit_SetDateElement(d.id, e) } function DateInputYearHandlePaste(a) { a = (a) ? (a) : ((window.event) ? (window.event) : null); if (a == null) { return true } var b = (a.target) ? (a.target) : ((event.srcElement) ? (event.srcElement) : null); if (b == null) { return true } var c; if (a.type == "paste") { c = window.clipboardData.getData("Text") } else { if (a.type == "drop") { c = a.dataTransfer.getData("Text") } else { return true } } for (i = 0; i < c.length; i++) { keyCode = c.charCodeAt(i); if (keyCode == 13 || keyCode == 8) { continue } if ((keyCode >= 48) && (keyCode <= 57)) { continue } else { return false } } b.value = c; return false } function DateInputYearKeyVerify(a) { a = (a) ? (a) : ((window.event) ? (window.event) : null); if (a == null) { return true } var b = (a.target) ? (a.target) : ((event.srcElement) ? (event.srcElement) : null); if (b == null) { return true } var c = ((a.charCode || a.initEvent) ? a.charCode : ((a.which) ? a.which : a.keyCode)); if (c == 0 || c == 13 || c == 8) { return true } if ((c >= 48) && (c <= 57)) { return true } return false; var d = b.value } function DateTimeInput_UpdateCalendar(a) { Nanno = document.getElementById(a + "_Year").value; Nmese = document.getElementById(a + "_Month").value; Ngiorno = document.getElementById(a + "_Day").value; var b = new Date(Nanno, Nmese - 1, Ngiorno); var c = $("#" + a + "_Calendar"); var d = c.datepicker("option", "dateFormat"); if (d == null) { d = "mm/dd/yy" } c.datepicker("setDate", $.datepicker.formatDate(d, b)) } function DateTimeInput_UpdateFromCalendar(d, a) { var h = $("#" + a + "_Calendar"); if (d == null) { return } var j = h.datepicker("option", "dateFormat"); if (j == null) { j = "mm/dd/yy" } var b = null; try { b = $.datepicker.parseDate(j, d) } catch (g) { b = new Date() } var f = h.datepicker("option", "minDate"); var k = h.datepicker("option", "maxDate"); var l = null; var c = null; if (f != null) { l = $.datepicker.parseDate(j, f) } if (k != null) { c = $.datepicker.parseDate(j, k) } if (l != null && b < l) { b = l } if (c != null && b > c) { b = c } document.getElementById(a + "_Year").value = b.getFullYear(); document.getElementById(a + "_Month").value = b.getMonth() + 1; document.getElementById(a + "_Day").value = b.getDate(); DateInputChanged(null, a, true) } function DateTimeInput_UpdateCalendarMinMax(a, c, e) { var b = $("#" + a + "_Calendar"); var d = b.datepicker("option", "dateFormat"); if (d == null) { d = "mm/dd/yy" } if (c != null) { b.datepicker("option", "minDate", $.datepicker.formatDate(d, c)) } else { b.datepicker("option", "minDate", null) } if (e != null) { b.datepicker("option", "maxDate", $.datepicker.formatDate(d, e)) } else { b.datepicker("option", "maxDate", null) } } function DateInputChanged(evt, cid, update, force, init) { var clientID; if (cid == null) { evt = (evt) ? (evt) : ((window.event) ? (window.event) : null); if (evt == null) { return false } var sorg = (evt.target) ? (evt.target) : ((event.srcElement) ? (event.srcElement) : null); if (sorg == null) { return false } clientID = sorg.id.substring(0, sorg.id.lastIndexOf("_")) } else { clientID = cid } if (eval(clientID + "Recursive") == true && force == null) { return } eval(clientID + "Recursive = true;"); var Nanno; var Nmese; var Ngiorno; var NHours; var NMinutes; var NSeconds; var CurrDate = eval(clientID + "_Curr"); var CurrDay = CurrDate.getDate(); var CurrMonth = CurrDate.getMonth(); var CurrYear = CurrDate.getFullYear(); var CurrHours = CurrDate.getHours(); var CurrMinutes = CurrDate.getMinutes(); var CurrSeconds = CurrDate.getSeconds(); var currMin = eval(clientID + "_MinDate"); var currMax = eval(clientID + "_MaxDate"); var dynamicMin = null; if (eval("(typeof " + clientID + "_ClientDynamicMin !== 'undefined') && (" + clientID + "_ClientDynamicMin != null)") == true) { dynamicMin = eval(clientID + "_ClientDynamicMin()") } var dynamicMax = null; if (eval("(typeof " + clientID + "_ClientDynamicMax !== 'undefined') && (" + clientID + "_ClientDynamicMax != null)") == true) { dynamicMax = eval(clientID + "_ClientDynamicMax()") } if (dynamicMin != null && (currMin == null || dynamicMin > currMin)) { if (currMax != null && dynamicMin > currMax) { currMin = currMax } else { currMin = dynamicMin } } if (dynamicMax != null && (currMax == null || dynamicMax < currMax)) { if (currMin != null && dynamicMax < currMin) { currMax = currMin } else { currMax = dynamicMax } } if (document.getElementById(clientID + "_Year") != null) { Nanno = document.getElementById(clientID + "_Year").value } else { Nanno = CurrYear } if (document.getElementById(clientID + "_Month") != null) { Nmese = document.getElementById(clientID + "_Month").value } else { Nmese = CurrMonth } if (document.getElementById(clientID + "_Day") != null) { Ngiorno = document.getElementById(clientID + "_Day").value } else { Ngiorno = CurrDay } if (document.getElementById(clientID + "_Hours") != null) { NHours = document.getElementById(clientID + "_Hours").value } else { NHours = CurrHours } if (document.getElementById(clientID + "_Minutes") != null) { NMinutes = document.getElementById(clientID + "_Minutes").value } else { NMinutes = CurrMinutes } if (document.getElementById(clientID + "_Seconds") != null) { NSeconds = document.getElementById(clientID + "_Seconds").value } else { NSeconds = CurrSeconds } var TempNewDate = new Date(Nanno, Nmese - 1, Ngiorno, NHours, NMinutes, NSeconds); if (currMax != null && currMax < TempNewDate) { TempNewDate = currMax } if (currMin != null && currMin > TempNewDate) { TempNewDate = currMin } Nanno = TempNewDate.getFullYear() + ""; Nmese = (TempNewDate.getMonth() + 1) + ""; Ngiorno = TempNewDate.getDate() + ""; NHours = TempNewDate.getHours() + ""; NMinutes = TempNewDate.getMinutes() + ""; NSeconds = TempNewDate.getSeconds() + ""; var NewYear; var NewMonth; var NewDay; var NewHours; var NewMinutes; var NewSeconds; var MaxYear; var MinYear; var MaxMonth; var MinMonth; var MinDay; var MaxDay; var MinHours; var MaxHours; var MinMinutes; var MaxMinutes; var MinSeconds; var MaxSeconds; eval(clientID + "_Valid = true"); NewYear = parseInt(Nanno); if (!isNaN(NewYear)) { if (currMax == null) { MaxYear = null } else { MaxYear = currMax.getFullYear() } if (currMin == null) { MinYear = null } else { MinYear = currMin.getFullYear() } if (MaxYear != null && MaxYear < NewYear) { NewYear = MaxYear } if (MinYear != null && MinYear > NewYear) { NewYear = MinYear } if (document.getElementById(clientID + "_Year") != null && !eval(clientID + "_DateHidden") && !eval(clientID + "_DateInCalendar")) { DateTimeAdjustYears(document.getElementById(clientID + "_Year"), MinYear, MaxYear) } if ((MaxYear == null || MaxYear >= NewYear) && (MinYear == null || MinYear <= NewYear)) { MaxMonth = 11; MinMonth = 0; if (MaxYear == NewYear) { MaxMonth = currMax.getMonth() } if (MinYear == NewYear) { MinMonth = currMin.getMonth() } NewMonth = parseInt(Nmese); if (!isNaN(NewMonth)) { NewMonth = NewMonth - 1; if (MinMonth > NewMonth) { NewMonth = MinMonth } if (MaxMonth < NewMonth) { NewMonth = MaxMonth } if (init || CurrYear == MinYear || CurrYear == MaxYear || NewYear == MinYear || NewYear == MaxYear) { if (document.getElementById(clientID + "_Month") != null && !eval(clientID + "_DateHidden") && !eval(clientID + "_DateInCalendar")) { DateTimeAdjustMonthes(document.getElementById(clientID + "_Month"), MinMonth, MaxMonth) } } MinDay = 1; MaxDay = DateInputGetNumDays(NewMonth, NewYear); if (MaxYear == NewYear && MaxMonth == NewMonth) { MaxDay = currMax.getDate() } if (MinYear == NewYear && MinMonth == NewMonth) { MinDay = currMin.getDate() } NewDay = parseInt(Ngiorno); if (!isNaN(NewDay)) { if (MinDay > NewDay) { NewDay = MinDay } if (MaxDay < NewDay) { NewDay = MaxDay } if (document.getElementById(clientID + "_Day") != null && !eval(clientID + "_DateHidden") && !eval(clientID + "_DateInCalendar")) { DateTimeAdjustDays(document.getElementById(clientID + "_Day"), MinDay, MaxDay) } MinHours = 0; MaxHours = 23; if (MaxYear == NewYear && MaxMonth == NewMonth && NewDay == MaxDay) { MaxHours = currMax.getHours() } if (MinYear == NewYear && MinMonth == NewMonth && NewDay == MinDay) { MinHours = currMin.getHours() } NewHours = parseInt(NHours); if (!isNaN(NewHours)) { if (MaxHours < NewHours) { NewHours = MaxHours } if (NewHours < MinHours) { NewHours = MinHours } if (document.getElementById(clientID + "_Hours") != null) { DateTimeAdjustTimeElement(document.getElementById(clientID + "_Hours"), MinHours, MaxHours) } MinMinutes = 0; MaxMinutes = 59; if (MaxYear == NewYear && MaxMonth == NewMonth && NewDay == MaxDay && MaxHours == NewHours) { MaxMinutes = currMax.getMinutes() } if (MinYear == NewYear && MinMonth == NewMonth && NewDay == MinDay && MinHours == NewHours) { MinMinutes = currMin.getMinutes() } NewMinutes = parseInt(NMinutes); if (!isNaN(NewMinutes)) { if (MaxMinutes < NewMinutes) { NewMinutes = MaxMinutes } if (MinMinutes > NewMinutes) { NewMinutes = MinMinutes } if (document.getElementById(clientID + "_Minutes") != null) { DateTimeAdjustTimeElement(document.getElementById(clientID + "_Minutes"), MinMinutes, MaxMinutes) } MinSeconds = 0; MaxSeconds = 59; if (MaxYear == NewYear && MaxMonth == NewMonth && NewDay == MaxDay && MaxHours == NewHours && MaxMinutes == NewMinutes) { MaxSeconds = currMax.getSeconds() } if (MinYear == NewYear && MinMonth == NewMonth && NewDay == MinDay && MinHours == NewHours && MinMinutes == NewMinutes) { MinSeconds = currMin.getSeconds() } NewSeconds = parseInt(NSeconds); if (!isNaN(NewSeconds)) { if (MaxSeconds < NewSeconds) { NewSeconds = MaxSeconds } if (NewSeconds < MinSeconds) { NewSeconds = MinSeconds } if (document.getElementById(clientID + "_Seconds") != null) { DateTimeAdjustTimeElement(document.getElementById(clientID + "_Seconds"), MinSeconds, MaxSeconds) } } else { eval(clientID + "_Valid = false") } } else { eval(clientID + "_Valid = false") } } else { eval(clientID + "_Valid = false") } } else { eval(clientID + "_Valid = false") } } else { eval(clientID + "_Valid = false") } } } else { eval(clientID + "_Valid = false") } if (eval(clientID + "_DateInCalendar")) { DateTimeInput_UpdateCalendarMinMax(clientID, currMin, currMax) } var AChange = false; if (eval(clientID + "_Valid")) { if (update == true || (cid == null && (CurrYear != NewYear || CurrMonth != NewMonth || CurrDay != NewDay || CurrHours != NewHours || CurrMinutes != NewMinutes || CurrSeconds != NewSeconds))) { AChange = true } CurrYear = NewYear; CurrMonth = NewMonth; CurrDay = NewDay; CurrHours = NewHours; CurrMinutes = NewMinutes; CurrSeconds = NewSeconds } if (!AChange) { eval(clientID + "Recursive = false;"); return true } eval(clientID + "_Curr = new Date(CurrYear, CurrMonth, CurrDay, CurrHours, CurrMinutes, CurrSeconds)"); if (document.getElementById(clientID + "_Year") != null) { MvcControlsToolKit_SetDateElement(clientID + "_Year", CurrYear) } if (document.getElementById(clientID + "_Month") != null) { MvcControlsToolKit_SetDateElement(clientID + "_Month", CurrMonth + 1) } if (document.getElementById(clientID + "_Day") != null) { MvcControlsToolKit_SetDateElement(clientID + "_Day", CurrDay) } if (eval(clientID + "_DateInCalendar")) { DateTimeInput_UpdateCalendar(clientID) } if (document.getElementById(clientID + "_Hours") != null) { MvcControlsToolKit_SetDateElement(clientID + "_Hours", CurrHours) } if (document.getElementById(clientID + "_Minutes") != null) { MvcControlsToolKit_SetDateElement(clientID + "_Minutes", CurrMinutes) } if (document.getElementById(clientID + "_Seconds") != null) { MvcControlsToolKit_SetDateElement(clientID + "_Seconds", CurrSeconds) } var currDate = eval(clientID + "_Curr"); RefreshDependencies(clientID); eval(clientID + "_ClientDateChanged(" + currDate.getTime() + ")"); $("#" + clientID + "_Hidden").trigger("DateTimeInput_Changed"); eval(clientID + "Recursive = false;"); return true } function MvcControlsToolKit_SetDateElement(d, c) { var b = document.getElementById(d); if (b.tagName == "SELECT") { c = parseInt(c); for (var a = b.options.length - 1; a >= 0; a--) { if (parseInt(b.options[a].value) <= c) { b.selectedIndex = a; return } } b.selectedIndex = 0 } else { if ((c === null) || (c === undefined)) { c = "" } b.value = c } } function SetDateInput(id, value, cType) { if (eval("typeof " + id + "_Curr === 'undefined'") == true) { return } var currDate = eval(id + "_Curr"); if (currDate == null) { return } var currDateInMilliseconds = currDate.getTime(); if (cType == 1 && value >= currDateInMilliseconds) { return } if (cType == 2 && value <= currDateInMilliseconds) { return } var DateInFormat = new Date(value); var currMin = eval(id + "_MinDate"); var currMax = eval(id + "_MaxDate"); if (currMin != null && DateInFormat < currMin) { DateInFormat = currMin } if (currMax != null && DateInFormat > currMax) { DateInFormat = currMax } if (document.getElementById(id + "_Hours") != null) { if (document.getElementById(id + "_Year") != null) { MvcControlsToolKit_SetDateElement(id + "_Year", DateInFormat.getFullYear()); DateInputChanged(null, id, false, true) } if (document.getElementById(id + "_Month") != null) { MvcControlsToolKit_SetDateElement(id + "_Month", DateInFormat.getMonth() + 1); DateInputChanged(null, id, false, true) } if (document.getElementById(id + "_Day") != null) { MvcControlsToolKit_SetDateElement(id + "_Day", DateInFormat.getDate()); DateInputChanged(null, id, false, true) } if (document.getElementById(id + "_Hours") != null) { MvcControlsToolKit_SetDateElement(id + "_Hours", DateInFormat.getHours()); DateInputChanged(null, id, false, true) } if (document.getElementById(id + "_Minutes") != null) { MvcControlsToolKit_SetDateElement(id + "_Minutes", DateInFormat.getMinutes()); DateInputChanged(null, id, false, true) } if (document.getElementById(id + "_Seconds") != null) { MvcControlsToolKit_SetDateElement(id + "_Seconds", DateInFormat.getSeconds()); DateInputChanged(null, id, true, true) } } else { if (document.getElementById(id + "_Year") != null) { MvcControlsToolKit_SetDateElement(id + "_Year", DateInFormat.getFullYear()); DateInputChanged(null, id, false, true) } if (document.getElementById(id + "_Month") != null) { MvcControlsToolKit_SetDateElement(id + "_Month", DateInFormat.getMonth() + 1); DateInputChanged(null, id, false, true) } if (document.getElementById(id + "_Day") != null) { MvcControlsToolKit_SetDateElement(id + "_Day", DateInFormat.getDate()); DateInputChanged(null, id, true, true) } } if (eval(id + "_DateInCalendar")) { DateTimeInput_UpdateCalendar(id) } } function GetDateInput(id) { return eval(id + "_Curr") } function MvcControlsToolkit_DateTimeInput_SetString(b, c) { clientID = b.id.substring(0, b.id.lastIndexOf("_")); var a = null; if (c == null || c == "") { a = new Date() } else { a = MvcControlsToolkit_Parse(c, MvcControlsToolkit_DataType_DateTime) } SetDateInput(clientID, a.getTime(), 3) } function MvcControlsToolkit_DateTimeInput_Set(sorg, value, format, valueType) { clientID = sorg.id.substring(0, sorg.id.lastIndexOf("_")); if ($("#" + sorg.id).length == 0 || eval("typeof " + clientID + "_Curr") === "undefined" || (!($("#" + clientID + "_Hidden").data("ready") || false))) { var retry = function () { MvcControlsToolkit_DateTimeInput_Set(sorg, value, format, valueType) }; setTimeout(retry, 0); return } if (value == null || value == "") { value = new Date() } SetDateInput(clientID, value.getTime(), 3) } function MvcControlsToolkit_DateTimeInput_SetById(d, a, b, c) { if (a == null || a == "") { a = new Date() } SetDateInput(d + "__", a.getTime(), 3) } function MvcControlsToolkit_DateTimeInput_Get(sorg, valueType) { clientID = sorg.id.substring(0, sorg.id.lastIndexOf("_")); if (eval("typeof " + clientID + "_Curr") === "undefined") { return null } if (!($("#" + clientID + "_Hidden").data("ready") || false)) { return null } return eval(clientID + "_Curr") } function MvcControlsToolkit_DateTimeInput_GetById(id, valueType) { return eval(id + "___Curr") } function MvcControlsToolkit_DateTimeInput_BindChange(b, a) { $("#" + b + "___Hidden").bind("DateTimeInput_Changed", a) } function MvcControlsToolkit_DateTimeInput_UnbindChange(b, a) { $("#" + b + "___Hidden").unbind("DateTimeInput_Changed", a) } function MvcControlsToolkit_DateTimeInput_GetString(a) { clientID = a.id.substring(0, a.id.lastIndexOf("_")); return MvcControlsToolkit_Format(GetDateInput(clientID), "s", MvcControlsToolkit_DataType_DateTime, "", "") } function AddToUpdateList(id, toAdd) { if (id == null || toAdd == null) { return } var currIndex = eval(id + "_UpdateListIndex"); eval(id + "_UpdateList[" + currIndex + "] = '" + toAdd + "';"); currIndex++; eval(id + "_UpdateListIndex = " + currIndex + ";") } function RefreshDependencies(id) { if (eval("typeof " + id + "_UpdateListIndex === 'undefined'") == true) { return } var length = eval(id + "_UpdateListIndex"); if (length == null) { return } for (var i = 0; i < length; i++) { DateInputChanged(null, eval(id + "_UpdateList[" + i + "]"), true) } };