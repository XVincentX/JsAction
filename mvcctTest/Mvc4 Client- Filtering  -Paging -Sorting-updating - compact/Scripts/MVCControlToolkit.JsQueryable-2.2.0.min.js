(function () { mvcct.$$ = { and: "and", or: "or", not: "not", eq: "eq", ne: "ne", gt: "gt", ge: "ge", lt: "lt", le: "le", endswith: "endswith", startswith: "startswith", substringof: "substringof", substringofInv: "substringofInv", notSupported: "ns", encodeCondition: function (code) { if (code == "Equal" || code == "1") { return mvcct.$$.eq } else { if (code == "NotEqual" || code == "2") { return mvcct.$$.ne } else { if (code == "LessThan" || code == "4") { return mvcct.$$.lt } else { if (code == "LessThanOrEqual" || code == "8") { return mvcct.$$.le } else { if (code == "GreaterThan" || code == "16") { return mvcct.$$.gt } else { if (code == "GreaterThanOrEqual" || code == "32") { return mvcct.$$.ge } else { if (code == "StartsWith" || code == "64") { return mvcct.$$.startswith } else { if (code == "EndsWith" || code == "128") { return mvcct.$$.endswith } else { if (code == "Contains" || code == "256") { return mvcct.$$.substringofInv } else { if (code == "IsContainedIn" || code == "512") { return mvcct.$$.substringof } else { return mvcct.$$.notSupported } } } } } } } } } } } }; mvcct.Queryable = function (fop, negate) { var _filterOperator = fop || this.$$.and; return { filterOperator: function () { return _filterOperator }, get: function () { return null }, execute: function (callBack) { }, getState: function () { return null }, setState: function (state) { }, resetFilter: function () { return this }, resetSorting: function () { return this }, resetPaging: function () { return this }, setSorting: function (sortString) { return this }, setFilter: function (filterString) { return this }, setPaging: function (page, pageSize) { return this }, importSorting: function (sortString) { if (sortString == null || sortString == "") { return this } this.resetSorting(); var allConditions = sortString.split(";"); for (var i = 0; i < allConditions.length; i++) { var pair = allConditions[i].split("#"); if (pair.length < 2) { continue } this.addSort(MvcControlsToolkit_Trim(pair[0]), pair[1].indexOf("-") >= 0) } return this }, importSortingControl: function (sortingControlId) { return this.importSorting($("#" + sortingControlId + "___SortInfoAsString").val()) }, importPager: function (pagerId, pageSize) { var pager = $("#" + pagerId); this.setPaging(parseInt(pager.val()), pageSize); return this }, addSort: function (field, desc, enabled) { return this }, addCondition: function (operator, value1, value2, enabled, currType) { return this }, addConditionAsString: function (operator, field, currSearch, currType, enabled) { if (enabled === false) { return this } currSearch = MvcControlsToolkit_Parse(currSearch, currType); if (currType == 0 || (currType == 4 && currSearch) || (currType > 0 && currType < 4 && !isNaN(currSearch))) { this.addCondition(operator, field, currSearch, currType, enabled) } }, open: function (logicalOperator, enabled, negate) { return res }, close: function (enabled) { if ((this["father"] || null) == null) { return this } return this.father }, importClauses: function (filterID) { var index = 0; var finished = false; var inner = this; if (this.filterOperator() != mvcct.$$.and) { inner = this.open(mvcct.$$.and, true) } while (!finished) { var ph = $("#" + filterID + "___" + index); var base = filterID + "___" + index + "___"; if (ph.length != 0) { var selector = $("#" + base + "Selected"); if (selector.length > 0 && (selector.val() == "True" || (selector.prop("checked") || false))) { var currCondition = mvcct.$$.encodeCondition($("#" + base + "Condition").val()); if (currCondition != mvcct.$$.notSupported) { var field = $("#" + filterID + "___" + index + "_f_ields").val().split(",")[0]; var currSearchDom = $("#" + base + "Search"); var currSearch = null; var currType = null; var control = $("#" + base + "Search[data-element-type], #" + base + "Search_hidden[data-element-type], #" + base + "Search___Hidden[data-element-type]"); if (control.length > 0) { currType = parseInt(control.attr("data-client-type") || "0"); var element = control[0]; currSearch = eval("MvcControlsToolkit_" + control.attr("data-element-type") + "_Get(element, currType)"); if (currType == 0 || (currType == 4 && currSearch) || (currType > 0 && currType < 4 && !isNaN(currSearch))) { inner.addCondition(currCondition, field, currSearch, currType) } } else { currSearch = currSearchDom.val(); currType = parseInt(currSearchDom.attr("data-client-type") || "0"); inner.addConditionAsString(currCondition, field, currSearch, currType) } } } } else { finished = true } index++ } if (this.filterOperator() != mvcct.$$.and) { inner.close(true) } return this } } }; mvcct.oDataQueryable = function (link, fop, options, negate) { var filter = ""; var sorting = ""; var paging = ""; var ancestor = this.Queryable(fop, negate); options = $.extend({}, mvcct.oDataQueryable.DefaulOptions, options); return $.extend({}, ancestor, { get: function () { var res = ""; if (options.includeTotalcount) { if (res != "") { res = res + "&" } res = res + "$inlinecount=allpages" } if (filter != "") { if (res != "") { res = res + "&" } if (negate === true) { res = res + mvcct.$$.not + " (" + filter + ")" } res = res + filter } if (sorting != "") { if (res != "") { res = res + "&" } res = res + sorting } if (paging != "") { if (res != "") { res = res + "&" } res = res + paging } if (res != "") { res = link + options.connector + res } else { res = link } return res }, execute: function (callBack, errorCallback) { $.ajax({ url: this.get(), contentType: "application/json", dataType: "text", success: function (data, textStatus, jqXHR) { data = $.parseJSON(data); callBack(data, textStatus, jqXHR) }, error: errorCallback }) }, setState: function (state) { filter = state.f; sorting = state.s; paging = state.p }, getState: function () { var res = { f: filter, s: sorting, p: paging }; return res }, resetFilter: function () { filter = ""; return this }, resetSorting: function () { sorting = ""; return this }, resetPaging: function () { paging = ""; return this }, setSorting: function (sortString) { sorting = sortString; return this }, setFilter: function (filterString) { filter = filterString; return this }, setPaging: function (page, pageSize) { if (pageSize == null || pageSize == "") { pageSize = 1 } var skip = (page - 1) * pageSize; paging = options.skip + skip + "&" + options.top + pageSize; return this }, addSort: function (field, desc, enabled) { if (enabled === false) { return this } field = field.replace(".", "/"); if (sorting != "") { sorting = sorting + "," } else { sorting = options.orderby } sorting = sorting + field + " " + (desc ? options.desc : options.asc); return this }, addStringCondition: function (condition, enabled) { if (enabled === false || condition == "") { return this } if (filter != "") { filter = filter + " " + this.filterOperator() + " " } else { filter = options.filter } filter = filter + condition; return this }, addCondition: function (operator, value1, value2, currType, enabled) { if (enabled === false) { return this } value1 = value1.replace(".", "/"); if (!currType) { if (mvcct.utils.isDate(value2)) { currType = 4 } else { if (mvcct.utils.isString(value2)) { currType = 0 } else { currType = 3 } } } if (value2 == null) { value2 = "null" } else { if (currType == 4) { value2 = "datetime'" + mvcct.utils.ISODate(new Date(value2.getTime() - value2.getTimezoneOffset() * 60000), true) + "'" } else { value2 = value2 + ""; if (currType <= 0) { if (mvcct.utils.isGuid(value2)) { value2 = "guid'" + value2 + "'" } else { value2 = "'" + encodeURIComponent(value2) + "'" } } } } if (operator == mvcct.$$.substringof || operator == mvcct.$$.startswith || operator == mvcct.$$.endswith) { this.addStringCondition(operator + "(" + value1 + "," + value2 + ") eq true") } else { if (operator == mvcct.$$.substringofInv) { this.addStringCondition(mvcct.$$.substringof + "(" + value2 + "," + value1 + ") eq true") } else { this.addStringCondition(value1 + " " + operator + " " + value2) } } return this }, open: function (logicalOperator, enabled, negate) { var newOption = $.extend({}, options, { connector: "", filter: "" }); var res = MvcControlsToolkit_SQueryable("", logicalOperator, newOption, negate); res.father = this; return res }, close: function (enabled) { if ((this["father"] || null) == null) { return this } var res = this.get(); if (res != "") { res = "(" + res + ")"; this.father.addStringCondition(res, enabled) } return this.father } }) }; mvcct.oDataQueryable.DefaulOptions = { includeTotalcount: true, connector: "?", skip: "$skip=", top: "$top=", orderby: "$orderby=", filter: "$filter=", desc: "desc", asc: "asc" }; mvcct.upshotQueryable = function (dataSource, fop, options, negate) { var filter = []; var sorting = []; var paging = null; var ancestor = this.Queryable(fop, negate); options = $.extend({}, mvcct.upshotQueryable.DefaulOptions, options); function getOperator(operator) { switch (operator) { case mvcct.$$.lt: return "<"; case mvcct.$$.le: return "<="; case mvcct.$$.eq: return "=="; case mvcct.$$.ne: return "!="; case mvcct.$$.ge: return ">="; case mvcct.$$.gt: return ">"; case mvcct.$$.startswith: return "StartsWith"; case mvcct.$$.endswith: return "EndsWith"; case mvcct.$$.substringofInv: return "Contains"; default: throw "The operator '" + operator + "' is not supported." } } return $.extend({}, ancestor, { get: function () { var res = ""; if (filter.length > 0) { dataSource.setFilter(filter) } else { dataSource.setFilter(null) } if (sorting.length > 0) { dataSource.setSort(sorting) } else { dataSource.setSort(null) } dataSource.setPaging(paging); return dataSource }, execute: function (callBack) { this.get(); dataSource.refresh() }, setState: function (state) { filter = state.f; sorting = state.s; paging = state.p }, getState: function () { var res = { f: filter, s: sorting, p: paging }; return res }, resetFilter: function () { filter = []; return this }, resetSorting: function () { sorting = []; return this }, resetPaging: function () { paging = null; return this }, setSorting: function (sortArray) { sorting = sortArray; return this }, setFilter: function (filterArray) { filter = filterArray; return this }, setPaging: function (page, pageSize) { if (pageSize == null || pageSize == "") { pageSize = 1 } var skip = (page - 1) * pageSize; paging = { skip: skip, take: pageSize, includeTotalCount: options.includeTotalcount }; return this }, addSort: function (field, desc, enabled) { if (enabled === false) { return this } sorting.push({ property: field, descending: desc }); return this }, addCondition: function (operator, value1, currSearch, currType, enabled) { if (enabled === false) { return this } filter.push({ property: value1, value: currSearch, operator: getOperator(operator) }); return this }, open: function (logicalOperator, enabled, negate) { throw "The method open is not supported."; return res }, close: function (enabled) { throw "The method close is not supported."; return this.father } }) }; mvcct.upshotQueryable.DefaulOptions = { includeTotalcount: true} })(); (function () { property = mvcct.utils.property; propertySet = mvcct.utils.propertySet; function a(d, c, b) { if (d == mvcct.$$.eq) { return function (e) { return property(e, c) == b } } else { if (d == mvcct.$$.gt) { return function (e) { return property(e, c) > b } } else { if (d == mvcct.$$.ge) { return function (e) { return property(e, c) >= b } } else { if (d == mvcct.$$.lt) { return function (e) { return property(e, c) < b } } else { if (d == mvcct.$$.le) { return function (e) { return property(e, c) <= b } } else { if (d == mvcct.$$.ne) { return function (e) { return property(e, c) != b } } else { if (d == mvcct.$$.startswith) { return function (f) { var e = property(f, c); if (e == null || b == null) { return false } return e.indexOf(b) == 0 } } else { if (d == mvcct.$$.endswith) { return function (f) { var e = property(f, c); if (e == null || b == null) { return false } return e.indexOf(b) == e.length - b.length } } else { if (d == mvcct.$$.substringof) { return function (f) { var e = property(f, c); if (e == null || b == null) { return false } return b.indexOf(e) >= 0 } } else { if (d == mvcct.$$.substringofInv) { return function (f) { var e = property(f, c); if (e == null || b == null) { return false } return e.indexOf(b) >= 0 } } } } } } } } } } } } mvcct.localQueryable = function (i, k, d) { var g = mvcct.Queryable(k, d); var c = []; var f = []; var e = 0; var h = 5; var l = null; function b() { var n; var o = Math.min(e, l.length); var p = Math.min(h, l.length - o); n = []; for (var m = 0; m < l.length; m++) { n.push(l[m]) } if (o > 0) { n.splice(0, o) } if (p == 0) { n = [] } else { if (p < n.length) { n.splice(p, n.length - p) } } return n } return $.extend({}, g, { get: function () { var n = this.getFilter(); var m = this.getSorting(); return function (q) { var o = []; if (n != null) { for (var p = 0; p < q.length; p++) { if (n(q[p])) { o.push(q[p]) } } } else { o = q } if (m == null) { l = o } else { l = o.sort(m) } return b() } }, getFilter: function () { if (c.length == 0) { return null } if (this.filterOperator() == mvcct.$$.and) { if (d) { return function (o) { var n = true; for (var m = 0; m < c.length; m++) { n = n && c[m](o) } return !n } } else { return function (o) { var n = true; for (var m = 0; m < c.length; m++) { n = n && c[m](o) } return n } } } else { if (d) { return function (o) { var n = true; for (var m = 0; m < c.length; m++) { n = n || c[m](o) } return !n } } else { return function (o) { var n = true; for (var m = 0; m < c.length; m++) { n = n || c[m](o) } return n } } } }, getSorting: function () { if (f.length == 0) { return null } return function (n, m) { for (var p = 0; p < f.length; p++) { var o = f[p](n, m); if (o != 0) { return o } } return 0 } }, execute: function (n) { var m = null; if (l != null) { m = b() } else { m = this.get()(i) } n({ TotalCount: l.length, Results: m }) }, setState: function (m) { l = null; c = m.f; f = m.s; e = m.ps; h = m.pt }, getState: function () { var m = { f: c, s: f, ps: e, pt: h }; return m }, resetFilter: function () { c = []; l = null; return this }, resetSorting: function () { f = []; l = null; return this }, resetPaging: function () { e = 0; return this }, setSorting: function (m) { l = null; f = m; return this }, setFilter: function (m) { l = null; c = m; return this }, setPaging: function (n, m) { if (m == null || m == "") { m = 1 } e = (n - 1) * m; h = m; return this }, addSort: function (n, o, m) { if (m === false) { return this } l = null; if (o) { f.push(function (p, q) { val1 = property(p, n); val2 = property(q, n); if (val1 < val2) { return 1 } else { if (val2 < val1) { return -1 } else { return 0 } } }) } else { f.push(function (p, q) { val1 = property(p, n); val2 = property(q, n); if (val1 < val2) { return -1 } else { if (val2 < val1) { return 1 } else { return 0 } } }) } return this }, addArrayCondition: function (n, m) { if (m === false || n == null) { return this } l = null; c = c.concat(n); return this }, addCondition: function (o, n, m, p, r) { if (p === false) { return this } var q = a(o, n, m); if (q != null) { c.push(q); l = null } return this }, open: function (m, n, p) { var o = MvcControlsToolkit_CQueryable("", m, p); o.father = this; return o }, close: function (m) { if ((this["father"] || null) == null) { return this } var n = this.getFilter(); if (n != null) { this.father.addCondition(n, m) } return this.father } }) }; mvcct.updatesManager = function (h, r, c, m, q, n, g) { function f() { this.collections = [] } f.prototype = { collections: null, add: function (B, i) { B._to_process_ = true; var A = i._oldValue_(); A.toUndo = true, this.collections.push(B) }, process: function () { for (var C = 0; C < this.collections.length; C++) { var H = this.collections[C]; if (!H._to_process_) { continue } H._to_process_ = false; var A = H(); var E = []; for (var D = 0; D < A.length; D++) { var B = A[D]["_oldValue_"]; if (B) { B = B() } if (B.toUndo) { var G = B.ph; G._modified(false); mvcct.utils.undo(G); var F = G._oldValue_(); F.pph = false; F.pc = false; G._modified(false); E.push(G) } else { E.push(A[D]) } } H(E) } } }; var l = new Array(); if (!m) { throw "keyExpression is not optional" } g = g || {}; var p = mvcct.updatesManager._count; var x = null; var b = null; mvcct.updatesManager._count++; var o = null; var z = null; function s(D, A, J) { var H = false; if (!A) { A = new Array(); A.root = J; H = true } if (!D) { D = mvcct.utils.property(r, c) } if (g.children) { for (var E = 0; E < g.children.length; E++) { var G = A["_" + g.children[E].updater.getId()]; var B = false; var F = false; if (!G) { if (A.root == g.children[E].updater) { G = g.children[E].updater.getData(); F = true } else { G = [] } B = true; A["_" + g.children[E].updater.getId()] = G } var I = g.children[E].expression; for (var C = 0; C < D.length; C++) { var K = mvcct.utils.property(D[C], I); if (mvcct.utils.isArray(K)) { G.push.apply(G, K); g.children[E].updater.copyChildrenRecursive(K, A) } } if (B) { g.children[E].updater.newSource(G, F) } } } } function v(F) { var A = false; if (!F) { F = new Array(); A = true } if (F["_" + p]) { return } F["_" + p] = true; if (g.isChild && x) { var D = q; if (n) { D = property(q, n) } var C = []; for (var B = 0; B < x.length; B++) { var E = x[B]; if (E._fatherReference !== undefined) { C.push(E._fatherReference) } else { C.push(-1) } } D[g.updater.f] = C } if (g.children) { for (var B = 0; B < g.children.length; B++) { g.children[B].updater.computeFatherReferences(F) } } } function k() { var T = b; if (!T) { T = mvcct.utils.property(r, c) } if (!mvcct.utils.isArray(T)) { return } var F = []; var A = []; var I = []; var G = []; var S = []; var B = []; var E = []; var D = false; var L = 0; for (var O = 0; O < T.length; O++) { var R = ko.utils.unwrapObservable(T[O]); var K; var P = R._oldValue_; if (P) { P = P() } K = ko.utils.unwrapObservable(R._inserted); if (K) { F.push(mvcct.utils.updateCopy(R)); B.push(R); G.push(R.ModelPrefix + "[" + R._tag); D = true; if (g.children) { for (var M = 0; M < g.children.length; M++) { var C = g.children[M].expression; var J = mvcct.utils.property(R, C); if (mvcct.utils.isArray(J)) { for (var N = 0; N < J.length; N++) { J[N]._fatherReference = L } } } } L++; continue } K = R._destroy; if (K) { if ((!P) || (!P.ph)) { A.push(mvcct.utils.property(R, m)); D = true } continue } K = ko.utils.unwrapObservable(R._modified); if (g.automodified || K) { if (mvcct.utils.changed(R)) { I.push(mvcct.utils.updateCopy(R)); S.push(R.ModelPrefix + "[" + R._tag); D = true } else { R._modified(false) } continue } } var Q = false; var H = {}; H[g.updater.i] = F; H[g.updater.u] = I; H[g.updater.d] = A; if (g.isChild) { H[g.updater.f] = E } if (!n) { if (!q) { Q = true } q = H } else { if (!q) { q = {}; Q = true; mvcct.utils.propertySet(q, n, H) } else { mvcct.utils.propertySet(q, n, H) } } x = B; return { changes: D, i: G, u: S, _justCreated_: Q, inserted: B} } function e(D, C, A) { if (g.children) { for (var B = 0; B < g.children.length; B++) { var E = g.children[B]; E.updater.resetAll(null, D, E.expression, A) } } } function y(D, C) { if (!D) { return } iPrefix = n ? n + "." + g.updater.i : g.updater.i; uPrefix = n ? n + "." + g.updater.u : g.updater.u; for (var B = 0; B < D.length; B++) { if (D[B]["_pocessed"]) { continue } var A = mvcct.utils.changeIndex(iPrefix, "", D[B].name, function (i) { return C.i[i] }); if (!A) { A = mvcct.utils.changeIndex(uPrefix, "", D[B].name, function (i) { return C.u[i] }) } if (A) { A = A.substring(1); D[B]._pocessed = true; D[B].name = A; D[B].id = mvcct.utils.idFromName(A) } } } function d(i, C, D) { if (C) { o = D; return } if (!h) { throw "updateUrl is not optional" } var B = ko.mapping.toJS(q); var A = mvcct.utils.stringify(B, g.isoDate); $.ajax({ url: h, contentType: "application/json", data: A, dataType: "text", type: "POST", success: function (F, G, E) { F = $.parseJSON(F); if (!F) { F = { errors: null} } else { if (F.errors && mvcct.utils.isArray(F.errors) && F.errors.length == 0) { F.errors = null } else { if (!F.errors) { F.errors = null } } } D(F, i, E.status) }, error: function (F, G, E) { var H = F.responseText || null; data = H ? $.parseJSON(H) : {}; if (mvcct.utils.isArray(data)) { data = { errors: data} } if (!data.errors) { data.errors = null } if (mvcct.utils.isArray(data.errors) && data.errors.length == 0) { data.errors = null } D(data, i, F.status) } }) } function u(F, C) { if (F == null) { F = mvcct.utils.property(r, c) } if (!mvcct.utils.isArray(F)) { return } for (var E = 0; E < F.length; E++) { if (g.children) { for (var B = 0; B < g.children.length; B++) { var H = mvcct.utils.property(F[E], g.children[B].expression); if (!mvcct.utils.isArray(H)) { continue } var D = []; var G = false; for (var A = 0; A < H.length; A++) { if (!(H[A]["_destroy"])) { D.push(H[A]) } else { G = true; g.dispose(H[A]) } } if (G) { mvcct.utils.propertySet(F[E], g.children[B].expression, D) } if (C) { g.children[B].updater.removeDeletedChildren(H, true) } } } } } function t(K, L, J, A) { var F = b; if (!F) { F = mvcct.utils.property(r, c) } if (!mvcct.utils.isArray(F)) { return } if (L && L.insertedKeys) { if (mvcct.utils.isArray(L.insertedKeys)) { for (var G = 0; G < L.insertedKeys.length; G++) { var I = L.insertedKeys[G]; if (!n || n == I.destinationExpression) { var E = I.keys; if (E && E.length) { E = ko.utils.unwrapObservable(ko.mapping.fromJS(E)); var D = J.inserted; for (var C = 0; C < E.length; C++) { K.newKey(D[C], E[C]) } } break } } } else { if (mvcct.utils.isObject(L.insertedKeys)) { var E = L.insertedKeys[n]; if (E) { E = ko.utils.unwrapObservable(ko.mapping.fromJS(E)); var D = J.inserted; for (var C = 0; C < E.length; C++) { K.newKey(D[G], E[C]) } } } } } for (var G = 0; G < F.length; G++) { if (!F[G]["_destroy"]) { K.accepted(F[G]) } } if (A && A.root == K && r && c) { A.root = null; var B = mvcct.utils.property(r, c); if (mvcct.utils.isArray(B)) { var H = []; for (var G = 0; G < B.length; G++) { if (!B[G]["_destroy"]) { H.push(B[G]) } } mvcct.utils.propertySet(r, c, H) } } } g = $.extend({}, { updater: { u: "Modified", i: "Inserted", d: "Deleted", f: "FatherReferences" }, updateCallback: function (B, i, A) { }, updatingCallback: function (A, i, B) { return A }, prepareCallback: function (i) { }, isChild: false, automodified: false, destroy: function (i, B, A) { if (B && A) { A.destroy(i) } else { i._destroy = B } }, dispose: function (i) { } }, g); if (g.children) { if (!mvcct.utils.isArray(g.children)) { g.children = [g.children] } for (var w = 0; w < g.children.length; w++) { l[g.children[w].expression] = g.children[w] } } return { removeDeletedChildren: u, copyChildrenRecursive: function (i, A) { s(i, A, this) }, computeFatherReferences: v, getId: function () { return p }, getData: function () { var i = property(r, c); if (i) { return i.slice() } else { return [] } }, options: function (i) { g = $.extend(g, i) }, optionsSetting: function (i) { return g[i] }, declareChild: function () { g.isChild = true }, addChildUpdateManager: function (i, A, B) { if (!g.children) { g.children = [] } g.children.push(i); l[i.expression] = i; if (!i.updater && A && B) { if (!q) { q = {} } i.updater = mvcct.updatesManager(null, null, null, A, q, B) } i.updater.declareChild(); return i.updater }, prepare: function (G, A, B, C, H) { if (!G) { return } G = ko.utils.unwrapObservable(G); if (!mvcct.utils.isArray(G)) { G = [G] } for (var F = 0; F < G.length; F++) { var E = G[F]; if (!E._inserted) { E._inserted = ko.observable(false) } if (!E._modified) { E._modified = ko.observable(false) } if (A) { mvcct.utils.Track(E, B, C) } if (H) { E.ModelPrefix = H } else { E.ModelPrefix = c } E.ModelId = mvcct.utils.idFromName(E.ModelPrefix); MvcControlsToolkit_NewTemplateName(E, E, true); if (g.children) { for (var D = 0; D < g.children.length; D++) { var I = E.ModelPrefix + "[" + E._tag + "]." + g.children[D].expression; g.children[D].updater.prepare(mvcct.utils.property(E, g.children[D].expression), A, B, C, I) } } g.prepareCallback(E) } }, newSource: function (A, i) { if (r && c && (!i)) { mvcct.utils.propertySet(r, c, A) } else { b = A } }, refreshErrors: function (C, D, O) { if (!D) { D = z } var P = []; if (D && D.errors) { if (O) { if (mvcct.utils.isObject(O)) { var F = O; O = F.ModelPrefix; if (!O) { return } O = O + "[" + F._tag + "]" } for (var G = 0; G < D.errors.length > 0; G++) { if (D.errors[G].name.indexOf(O) == 0) { L = true } else { P.push(D.errors[G]) } } D.errors = P } else { P = D.errors } } if (!C) { return } C.find(".input-validation-error").removeClass("input-validation-error"); C.find(".field-validation-error").removeClass("field-validation-error").addClass("field-validation-valid"); var A = C.find("[data-valmsg-summary=true]"); list = A.find("ul"); list.empty(); var L = false; if (P.length > 0) { for (var G = 0; G < P.length; G++) { var Q = false; var B = P[G]; var E = B.id == "" ? null : C.find("#" + B.id); if (E != null && E.length != 0) { Q = true; if (!E.hasClass("input-validation-error")) { E.addClass("input-validation-error") } var K = E.attr("data-companionpostfix"); if (typeof K !== "undefined" && K !== false) { var M = $("#" + B.id + K); if (M.length > 0 && !M.hasClass("input-validation-error")) { M.addClass("input-validation-error") } } var J = C.find("[data-valmsg-for='" + B.name + "']"); J.each(function (R, S) { var i = $(S); if (i.hasClass("field-validation-valid")) { i.removeClass("field-validation-valid").addClass("field-validation-error") } replace = $.parseJSON(i.attr("data-valmsg-replace")) !== false; if (replace) { i.empty(); $(B.errors[0]).appendTo(i) } }) } var I = P[G].name.lastIndexOf("["); if (I > 0) { var H = P[G].name.substring(0, I); var N = $("[data-valmsg-for='" + H + "']"); N.each(function (R, S) { var i = $(S); if (i.hasClass("field-validation-valid")) { i.removeClass("field-validation-valid").addClass("field-validation-error") } Q = true }) } if (B.id == "" || Q) { $.each(B.errors, function (i, R) { $("<li />").html(R).appendTo(list) }); L = true } } C.find("span.input-validation-error[data-element-type]").removeClass("input-validation-error") } if (L) { A.addClass("validation-summary-errors").removeClass("validation-summary-valid") } else { A.addClass("validation-summary-valid").removeClass("validation-summary-errors") } }, clearErrors: function (i, A) { this.refreshErrors(i, { errors: null }); if (A && z) { z.errors = null } }, modified: function (E, A, C, D, B) { var i = ko.utils.unwrapObservable(E); if ((!ko.utils.unwrapObservable(i._inserted)) && (!i._destroy)) { if (C) { i._modified(mvcct.utils.changed(E)) } else { if (A) { i._modified(true); mvcct.utils.Track(E, D, B) } else { i._modified(true) } } } }, inserted: function (B, A) { var i = ko.utils.unwrapObservable(A); B.push(A); i._inserted(true) }, deleted: function (B, A) { var i = ko.utils.unwrapObservable(A); if (ko.utils.unwrapObservable(i._inserted)) { g.dispose(i); B.remove(i) } else { g.destroy(i, true, B); i._modified(false) } }, arrayChanged: function (i) { return ko.computed(function () { var C = ko.utils.unwrapObservable(i); for (var B = 0; B < C.length; B++) { var A = C[B]; if (A._destroy || A._inserted() || A._modified()) { return true } } return false }) }, accepted: function (A) { var i = ko.utils.unwrapObservable(A); var C = i._destroy || i._inserted() || i._modified(); g.destroy(i, false); i._inserted(false); i._modified(false); if (C) { var B = i._oldValue_; if (B) { B = B(); B.ph = false; B.pph = false; B.pc = false; mvcct.utils.restoreEntity(i, B.value, B.vr) } } }, newKey: function (D, F, A) { A = A || m; mvcct.utils.propertySet(D, A, F); if (g.children) { for (var B = 0; B < g.children.length; B++) { var C = g.children[B]; var E = mvcct.utils.property(D, C.expression); if (E) { for (j = 0; j < E.length; j++) { mvcct.utils.propertySet(E[j], C.external, F) } } } } }, externalOf: function (i) { var A = l[i]; if (A) { return A.external } else { return null } }, moveChild: function (C, D, B, F, A, i, E) { this.addChild(D, B, F, false, A, i, E, C) }, move: function (A, C, i, B) { this.addChild(null, null, C, false, null, i, B, A) }, add: function (D, i, B, A, C) { addChild(null, null, D, i, B, A, C) }, addChild: function (O, S, E, R, K, T, N, F) { var B = null; var G = false; var P = null; var A = null; if (O && S) { B = l[S]; P = property(O, S, true); A = ko.utils.unwrapObservable(P); if (!mvcct.utils.isArray(A)) { A = []; P = ko.observableArray(A); propertySet(O, S, P, true) } if (!B) { B = { updater: this }; G = true } } else { G = true; P = property(r, c, true); A = ko.utils.unwrapObservable(P); if (!mvcct.utils.isArray(A)) { A = []; P = ko.observableArray(A); propertySet(r, c, P, true) } B = { updater: this} } if (!B) { return } var C = null; if (!R && F) { C = F() } var L = E._oldValue_; if (A != C) { var D = null; if (!G) { D = O.ModelPrefix + "[" + O._tag + "]." + S } if (L) { L = L(); B.updater.prepare(E, true, L.vr, L.ca, D) } else { B.updater.prepare(E, true, false, false, D); L = E._oldValue_() } } else { L = L() } if (!R && F) { C = F(); var H = null; if (!E._inserted() && !L.pph) { H = mvcct.utils.cloneEntity(E, L.vr, L.ca) } var Q = []; for (var I = 0; I < C.length; I++) { var M = ko.utils.unwrapObservable(C[I]); if (M != E) { Q.push(M) } else { if (H != null) { Q.push(H) } } } if (H) { var J = { value: L.value, vr: L.vr, ca: L.ca, ph: E }; H._oldValue_ = function () { return J }; L.pph = H; L.pc = F; g.destroy(H, true); H._modified(false); E._inserted(false); E._modified(true) } if (A == C) { A = Q; F(Q) } else { F(Q) } } if (!G) { var U = property(O, K || m); propertySet(E, B.external, U) } if (T) { var Q = []; if (!N) { Q.push(E) } for (var I = 0; I < A.length; I++) { var M = ko.utils.unwrapObservable(A[I]); Q.push(M); if (M == N) { Q.push(E) } } P(Q) } else { A.push(E); P(A) } if (R) { E._inserted(true) } }, newResult: function (i, A) { if (o) { var B = o; o = null; B(i, this, A) } }, reset: function (C, i, F, E) { var B = new f(); if (ko.utils.unwrapObservable(C._modified)) { var A = C._oldValue_; if (A) { A = A() } if (A.pph && A.pc) { var D; if (F) { D = F } else { D = mvcct.utils.property(r, c, true) } D.remove(C); B.add(A.pc, A.pph) } else { mvcct.utils.undo(C); C._modified(false) } } else { if (ko.utils.unwrapObservable(C._inserted)) { var D; if (F) { D = F } else { D = mvcct.utils.property(r, c, true) } g.dispose(C); D.remove(C) } } if (!E) { e(C, null, B) } B.process(); if (i) { this.refreshErrors(i, null, C) } }, addRelated: function (L, K, E, M, N) { var H = mvcct.utils.property(r, c); if (!H) { return } N = N || m; K = ko.utils.unwrapObservable(K); if (!mvcct.utils.isArray(K)) { K = [K] } var D = new Array(); for (var I = 0; I < K.length; I++) { var B = mvcct.utils.property(K[I], E); var A = D[B]; if (A) { A.push(K[I]) } else { D[B] = [K[I]] } } for (var I = 0; I < H.length; I++) { var O = D[mvcct.utils.property(H[I], N)]; var J = mvcct.utils.property(H[I], L, true); if (O) { if (ko.isObservable(J)) { var C = ko.utils.unwrapObservable(J); C.push.apply(C, O); J(C) } else { if (J && mvcct.utils.isArray(J)) { J.push.apply(J, O) } else { mvcct.utils.propertySet(H[I], L, ko.observableArray(O)) } } if (M) { for (var F = 0; F < O.length; F++) { var G = mvcct.utils.property(O[F], M, true); if (ko.isObservable(G)) { G.push(H[I]) } else { if (G && mvcct.utils.isArray(G)) { G.push(H[I]) } else { mvcct.utils.propertySet(O[F], M, ko.observableArray([H[I]])) } } } } } else { if (!J) { mvcct.utils.propertySet(H[I], L, ko.observableArray([])) } } } }, resetAll: function (E, J, H, F) { var G = null; var D = null; var A = false; if (!F) { F = new f(); A = true } if (J && H) { G = property(J, H, true) } D = G || mvcct.utils.property(r, c); D = ko.utils.unwrapObservable(D); if (!D) { return } var I = []; for (var C = 0; C < D.length; C++) { var K = D[C]; var B = K._oldValue_; if (B) { B = B() } if (B && B.pph && B.pc) { F.add(B.pc, B.pph); continue } else { if (ko.utils.unwrapObservable(K._inserted)) { g.dispose(K); continue } else { if (K._destroy) { if ((!B) || (!B.ph)) { g.destroy(K, false) } } else { if (g.automodified || ko.utils.unwrapObservable(K._modified)) { mvcct.utils.undo(K); K._modified(false) } } } } I.push(K); e(K, null, F) } if (A) { F.process() } if (G) { G(I); this.refreshErrors(E, null, J.ModelPrefix + "[" + J._tag + "]") } else { z = null; mvcct.utils.propertySet(r, c, I); if (E) { this.refreshErrors(E) } } }, submit: function (B, E, F) { var A = false; if (!F) { F = new Array(); F.root = this; A = true } if (F["_" + p]) { return false } F["_" + p] = true; if (A) { s(null, null, this) } var D = k(); if (g.children) { for (var C = 0; C < g.children.length; C++) { if (g.children[C].updater.submit(B, true, F)) { D.changes = true } } } if (A) { v() } if (!g.updatingCallback(D.changes, q, n)) { return } if (!E) { if ((!B) || B.length == 0) { B = $("#_DynamicJSonFormtoSubmit_"); if (B.length == 0) { if (!h) { throw "updateUrl is not optional" } $("body").first().prepend("<form id='_DynamicJSonFormtoSubmit_' action='" + h + "' method='post'><input type='hidden' name='display.$$' value='MVCControlsToolkit.Controls.Bindings.JSONAdapter' /><input type='hidden' name='$.JSonModel' value='' class='JSonModeltoSubmit' /></form>"); B = $("#_DynamicJSonFormtoSubmit_"); B.find(".JSonModeltoSubmit").val(mvcct.utils.stringify(ko.mapping.toJS(q), g.isoDate)) } } B.submit() } else { return true } }, update: function (D, F, A, G) { var B = false; if (!G) { G = new Array(); G.root = this; B = true } if (G["_" + p]) { return false } G["_" + p] = true; if (B) { s(null, null, this) } var E = k(); if (g.children) { for (var C = 0; C < g.children.length; C++) { if (g.children[C].updater.update(D, true, null, G)) { E.changes = true } } } if (B) { v() } if (!g.updatingCallback(E.changes, q, n)) { return false } d(this, F, function (H, J, I) { if (H.errors) { y(H.errors, E) } var L = { setErrors: true, model: r, expression: c, key: m, success: !H.errors }; g.updateCallback(L, H, I); z = H; if (!H.errors) { t(J, H, E, G) } b = null; if (g.children) { for (var K = 0; K < g.children.length; K++) { g.children[K].updater.newResult(H, I) } if ((!H.error) && (B)) { u(null, true) } } if (A) { if (!mvcct.utils.isArray(A)) { A = [A] } for (var K = 0; K < A.length; K++) { A[K].newResult(H, I) } } if (L.setErrors && (!F)) { J.refreshErrors(D, H) } }); return true } } }; mvcct.updatesManager._count = 0 })();



  